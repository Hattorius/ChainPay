"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[409],{6142:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var i=t(4848),a=t(8453);const s={sidebar_position:9},r="types",o={id:"JS-SDK/api/types",title:"types",description:"Below is a list of types used and exported by the ChainPay SDK.",source:"@site/docs/JS-SDK/api/types.md",sourceDirName:"JS-SDK/api",slug:"/JS-SDK/api/types",permalink:"/ChainPay/docs/JS-SDK/api/types",draft:!1,unlisted:!1,editUrl:"https://github.com/Hattorius/ChainPay/tree/main/docs/docs/JS-SDK/api/types.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"ideaSidebar",previous:{title:"constants",permalink:"/ChainPay/docs/JS-SDK/api/constants"},next:{title:"Solidity SDK",permalink:"/ChainPay/docs/category/solidity-sdk"}},c={},d=[{value:"<code>CreateTransactionInput</code>",id:"createtransactioninput",level:2},{value:"<code>TransactionType</code>",id:"transactiontype",level:2},{value:"<code>PayInput</code>",id:"payinput",level:2},{value:"<code>PaymentData</code>",id:"paymentdata",level:2}];function p(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"types",children:"types"})}),"\n",(0,i.jsx)(e.p,{children:"Below is a list of types used and exported by the ChainPay SDK."}),"\n",(0,i.jsx)(e.h2,{id:"createtransactioninput",children:(0,i.jsx)(e.code,{children:"CreateTransactionInput"})}),"\n",(0,i.jsxs)(e.p,{children:["The input type for creating a transaction through the SDK. This type is\nstructured differently depending on whether you're using\n",(0,i.jsx)(e.a,{href:"https://ethers.org/",children:"ethers.js"})," or ",(0,i.jsx)(e.a,{href:"https://viem.sh/",children:"viem"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"{\n    signer: Wallet;\n    recipient?: string;\n    token: string;\n    amount: number | bigint;\n    data_string?: string;\n    data_raw?: Uint8Array | string;\n    type: 'ethers';\n} | {\n    walletClient: {\n        signMessage: (args: {\n            message: SignableMessage;\n            account: `0x${string}`;\n        }) => Promise<SignMessageReturnType>;\n    };\n    account: `0x${string}`;\n    recipient?: string;\n    token: string;\n    amount: number | bigint;\n    data_string?: string;\n    data_raw?: Uint8Array | string;\n    type: 'viem';\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"transactiontype",children:(0,i.jsx)(e.code,{children:"TransactionType"})}),"\n",(0,i.jsx)(e.p,{children:"Represents a transaction that may or may not require payment."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"{\n    data: string;\n    token: string;\n    amount: number | bigint;\n    recipient: string;\n    signature: string;\n    encoded: string;\n    pay?: string;\n    widgetUrl?: string;\n    widget?: (el: string | HTMLIFrameElement) => Promise<TransactionType>;\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"payinput",children:(0,i.jsx)(e.code,{children:"PayInput"})}),"\n",(0,i.jsxs)(e.p,{children:["The input needed to create ",(0,i.jsx)(e.a,{href:"#paymentdata",children:(0,i.jsx)(e.code,{children:"PaymentData"})}),", used to initiate a\npayment transaction using ChainPay."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"{\n    transaction: string | TransactionType;\n    token: `0x${string}`; // token user wants to pay with\n    amount: bigint; // amount user wants to pay with\n    feeTier?: number;\n    chainpayContract: `0x${string}`;\n    type: 'raw';\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"paymentdata",children:(0,i.jsx)(e.code,{children:"PaymentData"})}),"\n",(0,i.jsx)(e.p,{children:"Contains all the necessary data for creating a transaction on the blockchain."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"{\n    value?: bigint;\n    args:\n        | [string, string, string]\n        | [string, string, bigint, string, string]\n        | [string, string, bigint, number, string, string]\n        | [string, string, bigint, string, bigint, number, string, string];\n    chainpayContract: `0x${string}`;\n    abi: T;\n    functionName: string;\n    approve?: {\n        token: `0x${string}`;\n        amount: bigint;\n    };\n}\n"})})]})}function l(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var i=t(6540);const a={},s=i.createContext(a);function r(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);